{"ast":null,"code":"var _jsxFileName = \"D:\\\\simacc_portal\\\\src\\\\pages\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n// Import Bootstrap components\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\n// Import the reusable feedback components\nimport ErrorMessage from '../components/ErrorMessage';\nimport SuccessMessage from '../components/SuccessMessage';\nimport LoadingSpinner from '../components/LoadingSpinner';\n\n// Import useNavigate from react-router-dom for redirection\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction LoginPage() {\n  _s();\n  // --- State Variables ---\n  // State for input fields\n  const [accountNumber, setAccountNumber] = useState('');\n  const [password, setPassword] = useState('');\n  // State for feedback (loading, error, success)\n  const [isLoading, setIsLoading] = useState(false); // Controls spinner and form visibility\n  const [error, setError] = useState(null); // Holds error message text\n  const [successMessage, setSuccessMessage] = useState(null); // Holds success message text\n\n  // --- React Router Hook ---\n  // Get the navigate function for redirection\n  const navigate = useNavigate();\n\n  // --- Input Change Handlers ---\n  // Updates state when account number/username input changes\n  const handleAccountNumberChange = event => {\n    setAccountNumber(event.target.value);\n  };\n\n  // Updates state when password input changes\n  const handlePasswordChange = event => {\n    setPassword(event.target.value);\n  };\n\n  // --- Form Submission Handler ---\n  // This function runs when the login form is submitted\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setIsLoading(true);\n    setError(null);\n    setSuccessMessage(null);\n    try {\n      // *** Simulate an API call delay ***\n      console.log('Attempting login with:', {\n        accountNumber,\n        password\n      });\n      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay (e.g., 1.5 seconds)\n\n      // *** Add the specific username and password check here for simulation ***\n      let apiResponse; // Declare apiResponse here\n\n      if (accountNumber === 'Colleen' && password === '0000') {\n        // Simulate a successful login response\n        apiResponse = {\n          success: true,\n          message: 'Login successful!'\n        };\n      } else {\n        // Simulate a failed login response for incorrect credentials\n        apiResponse = {\n          success: false,\n          message: 'Invalid username or password.'\n        };\n      }\n      // *** End of simulation check ***\n\n      // --- Handle the API response (this part remains the same) ---\n      if (apiResponse.success) {\n        setSuccessMessage(apiResponse.message);\n        // Redirect to the dashboard page upon successful login\n        // You would typically also save the user's authentication token here\n        navigate('/dashboard'); // Use the navigate function to change the route\n      } else {\n        // Display the error message from the API response\n        setError(apiResponse.message);\n      }\n    } catch (err) {\n      // Handle unexpected errors during the simulation delay or other issues\n      console.error('Simulation Error:', err); // Log the error for debugging\n      setError('An unexpected error occurred during login simulation.'); // Display a generic error message\n    } finally {\n      setIsLoading(false); // Stop loading\n    }\n  };\n\n  // --- Component JSX (What gets rendered) ---\n  return (\n    /*#__PURE__*/\n    // Outer Container to center the card on the page\n    _jsxDEV(Container, {\n      className: \"d-flex justify-content-center align-items-center\",\n      style: {\n        minHeight: '80vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"p-4 shadow-lg rounded\",\n        style: {\n          width: '25rem'\n        },\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [isLoading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this), error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            message: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this), successMessage && /*#__PURE__*/_jsxDEV(SuccessMessage, {\n            message: successMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 30\n          }, this), !isLoading && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\" \", /*#__PURE__*/_jsxDEV(Card.Title, {\n              className: \"text-center mb-4\",\n              children: \"SimAcc Portal Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form, {\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                className: \"mb-3\",\n                controlId: \"formBasicAccountNumber\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Account Number or Username\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"Enter account number or username\",\n                  value: accountNumber,\n                  onChange: handleAccountNumberChange,\n                  required: true\n                  // Disable input fields while loading is true\n                  ,\n                  disabled: isLoading\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                className: \"mb-3\",\n                controlId: \"formBasicPassword\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"password\",\n                  placeholder: \"Password\",\n                  value: password,\n                  onChange: handlePasswordChange,\n                  required: true\n                  // Disable input field while loading is true\n                  ,\n                  disabled: isLoading\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                type: \"submit\",\n                className: \"w-100 mt-3\"\n                // Disable the button while loading is true\n                ,\n                disabled: isLoading,\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-center mt-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-muted mb-1\",\n                  children: \"Don't have an account?\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: \"/register\",\n                  className: \"text-primary text-decoration-none\",\n                  children: \"Create Account\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(LoginPage, \"sxxirGmkEVaoTyClsMlZBrA47WE=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","Container","Form","Button","Card","ErrorMessage","SuccessMessage","LoadingSpinner","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPage","_s","accountNumber","setAccountNumber","password","setPassword","isLoading","setIsLoading","error","setError","successMessage","setSuccessMessage","navigate","handleAccountNumberChange","event","target","value","handlePasswordChange","handleSubmit","preventDefault","console","log","Promise","resolve","setTimeout","apiResponse","success","message","err","className","style","minHeight","children","width","Body","fileName","_jsxFileName","lineNumber","columnNumber","Title","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","required","disabled","variant","href","_c","$RefreshReg$"],"sources":["D:/simacc_portal/src/pages/LoginPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\n// Import Bootstrap components\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n// Import the reusable feedback components\r\nimport ErrorMessage from '../components/ErrorMessage';\r\nimport SuccessMessage from '../components/SuccessMessage';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\n\r\n// Import useNavigate from react-router-dom for redirection\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction LoginPage() {\r\n  // --- State Variables ---\r\n  // State for input fields\r\n  const [accountNumber, setAccountNumber] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  // State for feedback (loading, error, success)\r\n  const [isLoading, setIsLoading] = useState(false); // Controls spinner and form visibility\r\n  const [error, setError] = useState(null); // Holds error message text\r\n  const [successMessage, setSuccessMessage] = useState(null); // Holds success message text\r\n\r\n  // --- React Router Hook ---\r\n  // Get the navigate function for redirection\r\n  const navigate = useNavigate();\r\n\r\n  // --- Input Change Handlers ---\r\n  // Updates state when account number/username input changes\r\n  const handleAccountNumberChange = (event) => {\r\n    setAccountNumber(event.target.value);\r\n  };\r\n\r\n  // Updates state when password input changes\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  // --- Form Submission Handler ---\r\n  // This function runs when the login form is submitted\r\n \r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setSuccessMessage(null);\r\n\r\n    try {\r\n      // *** Simulate an API call delay ***\r\n      console.log('Attempting login with:', { accountNumber, password });\r\n      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay (e.g., 1.5 seconds)\r\n\r\n      // *** Add the specific username and password check here for simulation ***\r\n      let apiResponse; // Declare apiResponse here\r\n\r\n      if (accountNumber === 'Colleen' && password === '0000') {\r\n        // Simulate a successful login response\r\n        apiResponse = { success: true, message: 'Login successful!' };\r\n      } else {\r\n        // Simulate a failed login response for incorrect credentials\r\n        apiResponse = { success: false, message: 'Invalid username or password.' };\r\n      }\r\n      // *** End of simulation check ***\r\n\r\n\r\n      // --- Handle the API response (this part remains the same) ---\r\n      if (apiResponse.success) {\r\n        setSuccessMessage(apiResponse.message);\r\n        // Redirect to the dashboard page upon successful login\r\n        // You would typically also save the user's authentication token here\r\n        navigate('/dashboard'); // Use the navigate function to change the route\r\n\r\n      } else {\r\n        // Display the error message from the API response\r\n        setError(apiResponse.message);\r\n      }\r\n\r\n    } catch (err) {\r\n      // Handle unexpected errors during the simulation delay or other issues\r\n      console.error('Simulation Error:', err); // Log the error for debugging\r\n      setError('An unexpected error occurred during login simulation.'); // Display a generic error message\r\n\r\n    } finally {\r\n      setIsLoading(false); // Stop loading\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  // --- Component JSX (What gets rendered) ---\r\n  return (\r\n    // Outer Container to center the card on the page\r\n    <Container className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '80vh' }}>\r\n      {/* The Card component to visually contain the login form */}\r\n      <Card className=\"p-4 shadow-lg rounded\" style={{ width: '25rem' }}>\r\n        <Card.Body>\r\n          {/* --- Conditional Rendering for Feedback (Spinner, Error, Success) --- */}\r\n          {/* Show spinner when isLoading is true */}\r\n          {isLoading && <LoadingSpinner />}\r\n          {/* Show error message when there is an error */}\r\n          {error && <ErrorMessage message={error} />}\r\n          {/* Show success message when there is a success message */}\r\n          {successMessage && <SuccessMessage message={successMessage} />}\r\n\r\n          {/* --- Conditional Rendering for the Login Form and Title --- */}\r\n          {/* Show the title and form ONLY when not loading */}\r\n          {!isLoading && (\r\n            <> {/* Use a React Fragment to group multiple elements */}\r\n              {/* Card Title */}\r\n              <Card.Title className=\"text-center mb-4\">SimAcc Portal Login</Card.Title>\r\n\r\n              {/* The Login Form */}\r\n              <Form onSubmit={handleSubmit}>\r\n                {/* Account Number / Username Field */}\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicAccountNumber\">\r\n                  <Form.Label>Account Number or Username</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Enter account number or username\"\r\n                    value={accountNumber}\r\n                    onChange={handleAccountNumberChange}\r\n                    required\r\n                    // Disable input fields while loading is true\r\n                    disabled={isLoading}\r\n                  />\r\n                </Form.Group>\r\n\r\n                {/* Password Field */}\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                  <Form.Label>Password</Form.Label>\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onChange={handlePasswordChange}\r\n                    required\r\n                    // Disable input field while loading is true\r\n                    disabled={isLoading}\r\n                  />\r\n                </Form.Group>\r\n\r\n                {/* Login Button */}\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"w-100 mt-3\"\r\n                  // Disable the button while loading is true\r\n                  disabled={isLoading}\r\n                >\r\n                  Login\r\n                </Button>\r\n\r\n                {/* Link for Account Creation */}\r\n                <div className=\"text-center mt-3\">\r\n                  <p className=\"text-muted mb-1\">Don't have an account?</p>\r\n                  {/* Link to the registration page (assuming a /register route exists) */}\r\n                  <a href=\"/register\" className=\"text-primary text-decoration-none\">\r\n                    Create Account\r\n                  </a>\r\n                </div>\r\n              </Form>\r\n            </>\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default LoginPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}