{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000/api'; // Replace with your actual backend URL\n\n/**\r\n * Generic function to handle API requests.\r\n * @param {string} endpoint - The API endpoint (e.g., '/users', '/login').\r\n * @param {string} method - The HTTP method (e.g., 'GET', 'POST').\r\n * @param {object} [data] - The request body data (for POST, PUT, etc.).\r\n * @param {object} [headers] - Additional headers for the request.\r\n * @returns {Promise<object>} - A promise that resolves with the JSON response.\r\n * @throws {Error} - Throws an error if the request fails.\r\n */\nasync function request(endpoint, method = 'GET', data = null, headers = {}) {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      // Add any default headers here, like authorization tokens\n      ...headers\n    }\n  };\n  if (data) {\n    options.body = JSON.stringify(data);\n  }\n  try {\n    const response = await fetch(url, options);\n\n    // Check if the response is OK (status code 200-299)\n    if (!response.ok) {\n      const error = await response.json(); // Attempt to read error message from body\n      throw new Error(error.message || `API request failed with status ${response.status}`);\n    }\n\n    // Parse the JSON response body\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error('API request error:', error);\n    throw error; // Re-throw the error so the calling code can handle it\n  }\n}\n\n// --- Specific API Call Functions ---\n\n/**\r\n * Fetches data from a specific endpoint.\r\n * @param {string} endpoint - The API endpoint.\r\n * @param {object} [headers] - Additional headers.\r\n * @returns {Promise<object>} - Promise resolving with data.\r\n */\nexport async function get(endpoint, headers) {\n  return request(endpoint, 'GET', null, headers);\n}\n\n/**\r\n * Sends data to a specific endpoint using POST.\r\n * @param {string} endpoint - The API endpoint.\r\n * @param {object} data - The data to send.\r\n * @param {object} [headers] - Additional headers.\r\n * @returns {Promise<object>} - Promise resolving with response data.\r\n */\nexport async function post(endpoint, data, headers) {\n  return request(endpoint, 'POST', data, headers);\n}\n\n// You can add functions for PUT, DELETE, etc. similarly\n/*\r\nexport async function put(endpoint, data, headers) {\r\n  return request(endpoint, 'PUT', data, headers);\r\n}\r\n\r\nexport async function del(endpoint, headers) {\r\n  return request(endpoint, 'DELETE', null, headers); // DELETE usually doesn't have a body\r\n}\r\n*/\n\n// Example of a specific login function using the post helper\nexport async function login(username, password) {\n  const loginData = {\n    username,\n    password\n  };\n  // Assuming your login endpoint is '/auth/login'\n  return post('/auth/login', loginData);\n}\n\n// You would export the functions you want to use in other parts of your app\n// export { get, post, login }; // Or use named exports directly as shown above","map":{"version":3,"names":["API_BASE_URL","request","endpoint","method","data","headers","url","options","body","JSON","stringify","response","fetch","ok","error","json","Error","message","status","result","console","get","post","login","username","password","loginData"],"sources":["D:/simacc_portal/src/utils/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000/api'; // Replace with your actual backend URL\r\n\r\n/**\r\n * Generic function to handle API requests.\r\n * @param {string} endpoint - The API endpoint (e.g., '/users', '/login').\r\n * @param {string} method - The HTTP method (e.g., 'GET', 'POST').\r\n * @param {object} [data] - The request body data (for POST, PUT, etc.).\r\n * @param {object} [headers] - Additional headers for the request.\r\n * @returns {Promise<object>} - A promise that resolves with the JSON response.\r\n * @throws {Error} - Throws an error if the request fails.\r\n */\r\nasync function request(endpoint, method = 'GET', data = null, headers = {}) {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n\r\n  const options = {\r\n    method,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      // Add any default headers here, like authorization tokens\r\n      ...headers,\r\n    },\r\n  };\r\n\r\n  if (data) {\r\n    options.body = JSON.stringify(data);\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(url, options);\r\n\r\n    // Check if the response is OK (status code 200-299)\r\n    if (!response.ok) {\r\n      const error = await response.json(); // Attempt to read error message from body\r\n      throw new Error(error.message || `API request failed with status ${response.status}`);\r\n    }\r\n\r\n    // Parse the JSON response body\r\n    const result = await response.json();\r\n    return result;\r\n\r\n  } catch (error) {\r\n    console.error('API request error:', error);\r\n    throw error; // Re-throw the error so the calling code can handle it\r\n  }\r\n}\r\n\r\n// --- Specific API Call Functions ---\r\n\r\n/**\r\n * Fetches data from a specific endpoint.\r\n * @param {string} endpoint - The API endpoint.\r\n * @param {object} [headers] - Additional headers.\r\n * @returns {Promise<object>} - Promise resolving with data.\r\n */\r\nexport async function get(endpoint, headers) {\r\n  return request(endpoint, 'GET', null, headers);\r\n}\r\n\r\n/**\r\n * Sends data to a specific endpoint using POST.\r\n * @param {string} endpoint - The API endpoint.\r\n * @param {object} data - The data to send.\r\n * @param {object} [headers] - Additional headers.\r\n * @returns {Promise<object>} - Promise resolving with response data.\r\n */\r\nexport async function post(endpoint, data, headers) {\r\n  return request(endpoint, 'POST', data, headers);\r\n}\r\n\r\n// You can add functions for PUT, DELETE, etc. similarly\r\n/*\r\nexport async function put(endpoint, data, headers) {\r\n  return request(endpoint, 'PUT', data, headers);\r\n}\r\n\r\nexport async function del(endpoint, headers) {\r\n  return request(endpoint, 'DELETE', null, headers); // DELETE usually doesn't have a body\r\n}\r\n*/\r\n\r\n// Example of a specific login function using the post helper\r\nexport async function login(username, password) {\r\n  const loginData = { username, password };\r\n  // Assuming your login endpoint is '/auth/login'\r\n  return post('/auth/login', loginData);\r\n}\r\n\r\n// You would export the functions you want to use in other parts of your app\r\n// export { get, post, login }; // Or use named exports directly as shown above\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B,CAAC,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,OAAOA,CAACC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC1E,MAAMC,GAAG,GAAG,GAAGN,YAAY,GAAGE,QAAQ,EAAE;EAExC,MAAMK,OAAO,GAAG;IACdJ,MAAM;IACNE,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC;MACA,GAAGA;IACL;EACF,CAAC;EAED,IAAID,IAAI,EAAE;IACRG,OAAO,CAACC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;EACrC;EAEA,IAAI;IACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAEC,OAAO,CAAC;;IAE1C;IACA,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;MACrC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,OAAO,IAAI,kCAAkCN,QAAQ,CAACO,MAAM,EAAE,CAAC;IACvF;;IAEA;IACA,MAAMC,MAAM,GAAG,MAAMR,QAAQ,CAACI,IAAI,CAAC,CAAC;IACpC,OAAOI,MAAM;EAEf,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdM,OAAO,CAACN,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeO,GAAGA,CAACnB,QAAQ,EAAEG,OAAO,EAAE;EAC3C,OAAOJ,OAAO,CAACC,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAEG,OAAO,CAAC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeiB,IAAIA,CAACpB,QAAQ,EAAEE,IAAI,EAAEC,OAAO,EAAE;EAClD,OAAOJ,OAAO,CAACC,QAAQ,EAAE,MAAM,EAAEE,IAAI,EAAEC,OAAO,CAAC;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,eAAekB,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAC9C,MAAMC,SAAS,GAAG;IAAEF,QAAQ;IAAEC;EAAS,CAAC;EACxC;EACA,OAAOH,IAAI,CAAC,aAAa,EAAEI,SAAS,CAAC;AACvC;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}