{"ast":null,"code":"var _jsxFileName = \"D:\\\\simacc_portal\\\\src\\\\pages\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Form, Button, Spinner, Alert } from 'react-bootstrap';\nimport { useNavigate } from 'react-router-dom'; // Assuming you use react-router-dom\n// Import your API utility functions (e.g., axios instance)\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginPage() {\n  _s();\n  const [accountNumber, setAccountNumber] = useState('');\n  const [otp, setOtp] = useState('');\n  const [otpMethod, setOtpMethod] = useState(null); // 'phone' or 'email'\n  const [currentStep, setCurrentStep] = useState('enterAccount'); // 'enterAccount', 'chooseMethod', 'enterOtp'\n  const [availableMethods, setAvailableMethods] = useState([]); // e.g., ['phone', 'email']\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const handleRequestOtp = async e => {\n    e.preventDefault();\n    setError(null);\n    setLoading(true);\n    try {\n      // Call your backend API to request OTP\n      const response = await api.post('/login/request-otp', {\n        accountNumber\n      });\n\n      // Backend should return available methods or confirm which one was used\n      if (response.data.success) {\n        setAvailableMethods(response.data.availableMethods || []); // e.g., ['phone', 'email']\n        // Decide the next step based on backend response\n        if (response.data.sentDirectly) {\n          // If backend auto-sent to a default method\n          setCurrentStep('enterOtp');\n          // Maybe backend tells you which method it used? response.data.methodUsed\n          // setOtpMethod(response.data.methodUsed);\n          // Or you might handle this differently if no explicit choice is needed\n        } else if (response.data.availableMethods && response.data.availableMethods.length > 0) {\n          setCurrentStep('chooseMethod');\n        } else {\n          setError(\"Could not determine OTP method for this account.\");\n        }\n      } else {\n        setError(response.data.message || 'Account not found or failed to initiate OTP.');\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'An error occurred while requesting OTP.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSendOtpByMethod = async method => {\n    setOtpMethod(method); // Set the chosen method\n    setError(null);\n    setLoading(true);\n    try {\n      // Call backend API to explicitly send OTP via the chosen method\n      const response = await api.post('/login/send-otp', {\n        accountNumber,\n        method\n      });\n      if (response.data.success) {\n        setCurrentStep('enterOtp'); // Move to OTP input step\n      } else {\n        setError(response.data.message || `Failed to send OTP via ${method}.`);\n      }\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'An error occurred while sending OTP.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleVerifyOtp = async e => {\n    e.preventDefault();\n    setError(null);\n    setLoading(true);\n    try {\n      // Call your backend API to verify the entered OTP\n      const response = await api.post('/login/verify-otp', {\n        accountNumber,\n        otp,\n        otpMethod // Send the method used for verification\n      });\n      if (response.data.success) {\n        // Backend should return auth data, e.g., a token\n        localStorage.setItem('authToken', response.data.token); // Store the token\n        navigate('/dashboard'); // Redirect to dashboard\n      } else {\n        setError(response.data.message || 'Invalid OTP.');\n      }\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'An error occurred while verifying OTP.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this), loading && /*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }, this), currentStep === 'enterAccount' && /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleRequestOtp,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formAccountNumber\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Account Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          placeholder: \"Enter your account number\",\n          value: accountNumber,\n          onChange: e => setAccountNumber(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        disabled: loading,\n        children: \"Request OTP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), currentStep === 'chooseMethod' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select where to send the OTP:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 16\n      }, this), availableMethods.includes('phone') && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: () => handleSendOtpByMethod('phone'),\n        disabled: loading,\n        className: \"me-2\",\n        children: \"Send to Phone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), availableMethods.includes('email') && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: () => handleSendOtpByMethod('email'),\n        disabled: loading,\n        children: \"Send to Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 12\n    }, this), currentStep === 'enterOtp' && /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleVerifyOtp,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formOtp\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Enter 4-digit OTP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\" // Or type=\"number\" with pattern=\"[0-9]{4}\"\n          ,\n          placeholder: \"Enter OTP\",\n          value: otp,\n          onChange: e => setOtp(e.target.value),\n          required: true,\n          maxLength: 4,\n          minLength: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        disabled: loading,\n        children: \"Verify OTP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginPage, \"2B71r3nO2DEOFUD3iRPs8h8pfRU=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","Form","Button","Spinner","Alert","useNavigate","api","jsxDEV","_jsxDEV","LoginPage","_s","accountNumber","setAccountNumber","otp","setOtp","otpMethod","setOtpMethod","currentStep","setCurrentStep","availableMethods","setAvailableMethods","loading","setLoading","error","setError","navigate","handleRequestOtp","e","preventDefault","response","post","data","success","sentDirectly","length","message","err","_err$response","_err$response$data","handleSendOtpByMethod","method","_err$response2","_err$response2$data","handleVerifyOtp","localStorage","setItem","token","_err$response3","_err$response3$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","animation","onSubmit","Group","controlId","Label","Control","type","placeholder","value","onChange","target","required","disabled","includes","onClick","maxLength","minLength","_c","$RefreshReg$"],"sources":["D:/simacc_portal/src/pages/LoginPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Button, Spinner, Alert } from 'react-bootstrap';\r\nimport { useNavigate } from 'react-router-dom'; // Assuming you use react-router-dom\r\n// Import your API utility functions (e.g., axios instance)\r\nimport api from '../utils/api';\r\n\r\nfunction LoginPage() {\r\n  const [accountNumber, setAccountNumber] = useState('');\r\n  const [otp, setOtp] = useState('');\r\n  const [otpMethod, setOtpMethod] = useState(null); // 'phone' or 'email'\r\n  const [currentStep, setCurrentStep] = useState('enterAccount'); // 'enterAccount', 'chooseMethod', 'enterOtp'\r\n  const [availableMethods, setAvailableMethods] = useState([]); // e.g., ['phone', 'email']\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleRequestOtp = async (e) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n    setLoading(true);\r\n    try {\r\n      // Call your backend API to request OTP\r\n      const response = await api.post('/login/request-otp', { accountNumber });\r\n\r\n      // Backend should return available methods or confirm which one was used\r\n      if (response.data.success) {\r\n        setAvailableMethods(response.data.availableMethods || []); // e.g., ['phone', 'email']\r\n        // Decide the next step based on backend response\r\n        if (response.data.sentDirectly) { // If backend auto-sent to a default method\r\n             setCurrentStep('enterOtp');\r\n             // Maybe backend tells you which method it used? response.data.methodUsed\r\n             // setOtpMethod(response.data.methodUsed);\r\n             // Or you might handle this differently if no explicit choice is needed\r\n        } else if (response.data.availableMethods && response.data.availableMethods.length > 0) {\r\n             setCurrentStep('chooseMethod');\r\n        } else {\r\n             setError(\"Could not determine OTP method for this account.\");\r\n        }\r\n\r\n      } else {\r\n        setError(response.data.message || 'Account not found or failed to initiate OTP.');\r\n      }\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'An error occurred while requesting OTP.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSendOtpByMethod = async (method) => {\r\n      setOtpMethod(method); // Set the chosen method\r\n      setError(null);\r\n      setLoading(true);\r\n      try {\r\n          // Call backend API to explicitly send OTP via the chosen method\r\n          const response = await api.post('/login/send-otp', { accountNumber, method });\r\n\r\n          if (response.data.success) {\r\n              setCurrentStep('enterOtp'); // Move to OTP input step\r\n          } else {\r\n              setError(response.data.message || `Failed to send OTP via ${method}.`);\r\n          }\r\n      } catch (err) {\r\n          setError(err.response?.data?.message || 'An error occurred while sending OTP.');\r\n      } finally {\r\n          setLoading(false);\r\n      }\r\n  };\r\n\r\n\r\n  const handleVerifyOtp = async (e) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n    setLoading(true);\r\n    try {\r\n      // Call your backend API to verify the entered OTP\r\n      const response = await api.post('/login/verify-otp', {\r\n        accountNumber,\r\n        otp,\r\n        otpMethod // Send the method used for verification\r\n      });\r\n\r\n      if (response.data.success) {\r\n        // Backend should return auth data, e.g., a token\r\n        localStorage.setItem('authToken', response.data.token); // Store the token\r\n        navigate('/dashboard'); // Redirect to dashboard\r\n      } else {\r\n        setError(response.data.message || 'Invalid OTP.');\r\n      }\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'An error occurred while verifying OTP.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      {/* Your layout/styling */}\r\n      <h2>Login</h2>\r\n\r\n      {error && <Alert variant=\"danger\">{error}</Alert>}\r\n      {loading && <Spinner animation=\"border\" />}\r\n\r\n      {currentStep === 'enterAccount' && (\r\n        <Form onSubmit={handleRequestOtp}>\r\n          <Form.Group controlId=\"formAccountNumber\">\r\n            <Form.Label>Account Number</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Enter your account number\"\r\n              value={accountNumber}\r\n              onChange={(e) => setAccountNumber(e.target.value)}\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\" disabled={loading}>\r\n            Request OTP\r\n          </Button>\r\n        </Form>\r\n      )}\r\n\r\n      {currentStep === 'chooseMethod' && (\r\n           <div>\r\n               <p>Select where to send the OTP:</p>\r\n               {availableMethods.includes('phone') && (\r\n                    <Button variant=\"secondary\" onClick={() => handleSendOtpByMethod('phone')} disabled={loading} className=\"me-2\">\r\n                       Send to Phone\r\n                    </Button>\r\n               )}\r\n                {availableMethods.includes('email') && (\r\n                    <Button variant=\"secondary\" onClick={() => handleSendOtpByMethod('email')} disabled={loading}>\r\n                        Send to Email\r\n                    </Button>\r\n                )}\r\n           </div>\r\n      )}\r\n\r\n      {currentStep === 'enterOtp' && (\r\n        <Form onSubmit={handleVerifyOtp}>\r\n          <Form.Group controlId=\"formOtp\">\r\n            <Form.Label>Enter 4-digit OTP</Form.Label>\r\n            {/* You might want to show where it was sent, e.g., \"Sent to your phone ending in XXX\" */}\r\n            <Form.Control\r\n              type=\"text\" // Or type=\"number\" with pattern=\"[0-9]{4}\"\r\n              placeholder=\"Enter OTP\"\r\n              value={otp}\r\n              onChange={(e) => setOtp(e.target.value)}\r\n              required\r\n              maxLength={4}\r\n              minLength={4}\r\n            />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\" disabled={loading}>\r\n            Verify OTP\r\n          </Button>\r\n          {/* Optional: Add a \"Resend OTP\" button */}\r\n          {/* <Button variant=\"link\" onClick={handleResendOtp} disabled={loading}>Resend OTP</Button> */}\r\n        </Form>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}